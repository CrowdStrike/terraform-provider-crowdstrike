// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_cloud_azure_tenant

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func CloudAzureTenantResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"account_type": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"additional_features": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"feature": schema.StringAttribute{
							Required: true,
						},
						"product": schema.StringAttribute{
							Required: true,
						},
						"subscription_ids": schema.ListAttribute{
							ElementType: types.StringType,
							Required:    true,
						},
					},
					CustomType: AdditionalFeaturesType{
						ObjectType: types.ObjectType{
							AttrTypes: AdditionalFeaturesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional: true,
				Computed: true,
			},
			"additional_properties": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{},
				CustomType: AdditionalPropertiesType{
					ObjectType: types.ObjectType{
						AttrTypes: AdditionalPropertiesValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"admin_consent_url": schema.StringAttribute{
				Computed: true,
			},
			"app_registration_id": schema.StringAttribute{
				Computed: true,
			},
			"cid": schema.StringAttribute{
				Computed: true,
			},
			"cs_infra_region": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"cs_infra_subscription_id": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"dspm_regions": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"environment": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"management_group_ids": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"microsoft_graph_permission_ids": schema.ListAttribute{
				ElementType: types.StringType,
				Required:    true,
			},
			"products": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"features": schema.ListAttribute{
							ElementType: types.StringType,
							Required:    true,
						},
						"product": schema.StringAttribute{
							Required: true,
						},
					},
					CustomType: ProductsType{
						ObjectType: types.ObjectType{
							AttrTypes: ProductsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional: true,
				Computed: true,
			},
			"resource_name_prefix": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"resource_name_suffix": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"subscription_ids": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"tags": schema.MapAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"tenant_id": schema.StringAttribute{
				Required:            true,
				Description:         "Tenant ID",
				MarkdownDescription: "Tenant ID",
			},
		},
	}
}

type CloudAzureTenantModel struct {
	AccountType                 types.String              `tfsdk:"account_type"`
	AdditionalFeatures          types.List                `tfsdk:"additional_features"`
	AdditionalProperties        AdditionalPropertiesValue `tfsdk:"additional_properties"`
	AdminConsentUrl             types.String              `tfsdk:"admin_consent_url"`
	AppRegistrationId           types.String              `tfsdk:"app_registration_id"`
	Cid                         types.String              `tfsdk:"cid"`
	CsInfraRegion               types.String              `tfsdk:"cs_infra_region"`
	CsInfraSubscriptionId       types.String              `tfsdk:"cs_infra_subscription_id"`
	DspmRegions                 types.List                `tfsdk:"dspm_regions"`
	Environment                 types.String              `tfsdk:"environment"`
	ManagementGroupIds          types.List                `tfsdk:"management_group_ids"`
	MicrosoftGraphPermissionIds types.List                `tfsdk:"microsoft_graph_permission_ids"`
	Products                    types.List                `tfsdk:"products"`
	ResourceNamePrefix          types.String              `tfsdk:"resource_name_prefix"`
	ResourceNameSuffix          types.String              `tfsdk:"resource_name_suffix"`
	SubscriptionIds             types.List                `tfsdk:"subscription_ids"`
	Tags                        types.Map                 `tfsdk:"tags"`
	TenantId                    types.String              `tfsdk:"tenant_id"`
}

var _ basetypes.ObjectTypable = AdditionalFeaturesType{}

type AdditionalFeaturesType struct {
	basetypes.ObjectType
}

func (t AdditionalFeaturesType) Equal(o attr.Type) bool {
	other, ok := o.(AdditionalFeaturesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AdditionalFeaturesType) String() string {
	return "AdditionalFeaturesType"
}

func (t AdditionalFeaturesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	featureAttribute, ok := attributes["feature"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`feature is missing from object`)

		return nil, diags
	}

	featureVal, ok := featureAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`feature expected to be basetypes.StringValue, was: %T`, featureAttribute))
	}

	productAttribute, ok := attributes["product"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`product is missing from object`)

		return nil, diags
	}

	productVal, ok := productAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`product expected to be basetypes.StringValue, was: %T`, productAttribute))
	}

	subscriptionIdsAttribute, ok := attributes["subscription_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subscription_ids is missing from object`)

		return nil, diags
	}

	subscriptionIdsVal, ok := subscriptionIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subscription_ids expected to be basetypes.ListValue, was: %T`, subscriptionIdsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AdditionalFeaturesValue{
		Feature:         featureVal,
		Product:         productVal,
		SubscriptionIds: subscriptionIdsVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewAdditionalFeaturesValueNull() AdditionalFeaturesValue {
	return AdditionalFeaturesValue{
		state: attr.ValueStateNull,
	}
}

func NewAdditionalFeaturesValueUnknown() AdditionalFeaturesValue {
	return AdditionalFeaturesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAdditionalFeaturesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AdditionalFeaturesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AdditionalFeaturesValue Attribute Value",
				"While creating a AdditionalFeaturesValue value, a missing attribute value was detected. "+
					"A AdditionalFeaturesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AdditionalFeaturesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AdditionalFeaturesValue Attribute Type",
				"While creating a AdditionalFeaturesValue value, an invalid attribute value was detected. "+
					"A AdditionalFeaturesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AdditionalFeaturesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AdditionalFeaturesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AdditionalFeaturesValue Attribute Value",
				"While creating a AdditionalFeaturesValue value, an extra attribute value was detected. "+
					"A AdditionalFeaturesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AdditionalFeaturesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAdditionalFeaturesValueUnknown(), diags
	}

	featureAttribute, ok := attributes["feature"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`feature is missing from object`)

		return NewAdditionalFeaturesValueUnknown(), diags
	}

	featureVal, ok := featureAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`feature expected to be basetypes.StringValue, was: %T`, featureAttribute))
	}

	productAttribute, ok := attributes["product"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`product is missing from object`)

		return NewAdditionalFeaturesValueUnknown(), diags
	}

	productVal, ok := productAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`product expected to be basetypes.StringValue, was: %T`, productAttribute))
	}

	subscriptionIdsAttribute, ok := attributes["subscription_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subscription_ids is missing from object`)

		return NewAdditionalFeaturesValueUnknown(), diags
	}

	subscriptionIdsVal, ok := subscriptionIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subscription_ids expected to be basetypes.ListValue, was: %T`, subscriptionIdsAttribute))
	}

	if diags.HasError() {
		return NewAdditionalFeaturesValueUnknown(), diags
	}

	return AdditionalFeaturesValue{
		Feature:         featureVal,
		Product:         productVal,
		SubscriptionIds: subscriptionIdsVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewAdditionalFeaturesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AdditionalFeaturesValue {
	object, diags := NewAdditionalFeaturesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAdditionalFeaturesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AdditionalFeaturesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAdditionalFeaturesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAdditionalFeaturesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAdditionalFeaturesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAdditionalFeaturesValueMust(AdditionalFeaturesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AdditionalFeaturesType) ValueType(ctx context.Context) attr.Value {
	return AdditionalFeaturesValue{}
}

var _ basetypes.ObjectValuable = AdditionalFeaturesValue{}

type AdditionalFeaturesValue struct {
	Feature         basetypes.StringValue `tfsdk:"feature"`
	Product         basetypes.StringValue `tfsdk:"product"`
	SubscriptionIds basetypes.ListValue   `tfsdk:"subscription_ids"`
	state           attr.ValueState
}

func (v AdditionalFeaturesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["feature"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["product"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["subscription_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Feature.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["feature"] = val

		val, err = v.Product.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["product"] = val

		val, err = v.SubscriptionIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["subscription_ids"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AdditionalFeaturesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AdditionalFeaturesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AdditionalFeaturesValue) String() string {
	return "AdditionalFeaturesValue"
}

func (v AdditionalFeaturesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var subscriptionIdsVal basetypes.ListValue
	switch {
	case v.SubscriptionIds.IsUnknown():
		subscriptionIdsVal = types.ListUnknown(types.StringType)
	case v.SubscriptionIds.IsNull():
		subscriptionIdsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		subscriptionIdsVal, d = types.ListValue(types.StringType, v.SubscriptionIds.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"feature": basetypes.StringType{},
			"product": basetypes.StringType{},
			"subscription_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"feature": basetypes.StringType{},
		"product": basetypes.StringType{},
		"subscription_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"feature":          v.Feature,
			"product":          v.Product,
			"subscription_ids": subscriptionIdsVal,
		})

	return objVal, diags
}

func (v AdditionalFeaturesValue) Equal(o attr.Value) bool {
	other, ok := o.(AdditionalFeaturesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Feature.Equal(other.Feature) {
		return false
	}

	if !v.Product.Equal(other.Product) {
		return false
	}

	if !v.SubscriptionIds.Equal(other.SubscriptionIds) {
		return false
	}

	return true
}

func (v AdditionalFeaturesValue) Type(ctx context.Context) attr.Type {
	return AdditionalFeaturesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AdditionalFeaturesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"feature": basetypes.StringType{},
		"product": basetypes.StringType{},
		"subscription_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}

var _ basetypes.ObjectTypable = AdditionalPropertiesType{}

type AdditionalPropertiesType struct {
	basetypes.ObjectType
}

func (t AdditionalPropertiesType) Equal(o attr.Type) bool {
	other, ok := o.(AdditionalPropertiesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AdditionalPropertiesType) String() string {
	return "AdditionalPropertiesType"
}

func (t AdditionalPropertiesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return AdditionalPropertiesValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewAdditionalPropertiesValueNull() AdditionalPropertiesValue {
	return AdditionalPropertiesValue{
		state: attr.ValueStateNull,
	}
}

func NewAdditionalPropertiesValueUnknown() AdditionalPropertiesValue {
	return AdditionalPropertiesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAdditionalPropertiesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AdditionalPropertiesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AdditionalPropertiesValue Attribute Value",
				"While creating a AdditionalPropertiesValue value, a missing attribute value was detected. "+
					"A AdditionalPropertiesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AdditionalPropertiesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AdditionalPropertiesValue Attribute Type",
				"While creating a AdditionalPropertiesValue value, an invalid attribute value was detected. "+
					"A AdditionalPropertiesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AdditionalPropertiesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AdditionalPropertiesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AdditionalPropertiesValue Attribute Value",
				"While creating a AdditionalPropertiesValue value, an extra attribute value was detected. "+
					"A AdditionalPropertiesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AdditionalPropertiesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAdditionalPropertiesValueUnknown(), diags
	}

	if diags.HasError() {
		return NewAdditionalPropertiesValueUnknown(), diags
	}

	return AdditionalPropertiesValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewAdditionalPropertiesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AdditionalPropertiesValue {
	object, diags := NewAdditionalPropertiesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAdditionalPropertiesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AdditionalPropertiesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAdditionalPropertiesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAdditionalPropertiesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAdditionalPropertiesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAdditionalPropertiesValueMust(AdditionalPropertiesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AdditionalPropertiesType) ValueType(ctx context.Context) attr.Value {
	return AdditionalPropertiesValue{}
}

var _ basetypes.ObjectValuable = AdditionalPropertiesValue{}

type AdditionalPropertiesValue struct {
	state attr.ValueState
}

func (v AdditionalPropertiesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AdditionalPropertiesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AdditionalPropertiesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AdditionalPropertiesValue) String() string {
	return "AdditionalPropertiesValue"
}

func (v AdditionalPropertiesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v AdditionalPropertiesValue) Equal(o attr.Value) bool {
	other, ok := o.(AdditionalPropertiesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v AdditionalPropertiesValue) Type(ctx context.Context) attr.Type {
	return AdditionalPropertiesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AdditionalPropertiesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}

var _ basetypes.ObjectTypable = ProductsType{}

type ProductsType struct {
	basetypes.ObjectType
}

func (t ProductsType) Equal(o attr.Type) bool {
	other, ok := o.(ProductsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ProductsType) String() string {
	return "ProductsType"
}

func (t ProductsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	featuresAttribute, ok := attributes["features"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`features is missing from object`)

		return nil, diags
	}

	featuresVal, ok := featuresAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`features expected to be basetypes.ListValue, was: %T`, featuresAttribute))
	}

	productAttribute, ok := attributes["product"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`product is missing from object`)

		return nil, diags
	}

	productVal, ok := productAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`product expected to be basetypes.StringValue, was: %T`, productAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ProductsValue{
		Features: featuresVal,
		Product:  productVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewProductsValueNull() ProductsValue {
	return ProductsValue{
		state: attr.ValueStateNull,
	}
}

func NewProductsValueUnknown() ProductsValue {
	return ProductsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewProductsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ProductsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ProductsValue Attribute Value",
				"While creating a ProductsValue value, a missing attribute value was detected. "+
					"A ProductsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ProductsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ProductsValue Attribute Type",
				"While creating a ProductsValue value, an invalid attribute value was detected. "+
					"A ProductsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ProductsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ProductsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ProductsValue Attribute Value",
				"While creating a ProductsValue value, an extra attribute value was detected. "+
					"A ProductsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ProductsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewProductsValueUnknown(), diags
	}

	featuresAttribute, ok := attributes["features"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`features is missing from object`)

		return NewProductsValueUnknown(), diags
	}

	featuresVal, ok := featuresAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`features expected to be basetypes.ListValue, was: %T`, featuresAttribute))
	}

	productAttribute, ok := attributes["product"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`product is missing from object`)

		return NewProductsValueUnknown(), diags
	}

	productVal, ok := productAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`product expected to be basetypes.StringValue, was: %T`, productAttribute))
	}

	if diags.HasError() {
		return NewProductsValueUnknown(), diags
	}

	return ProductsValue{
		Features: featuresVal,
		Product:  productVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewProductsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ProductsValue {
	object, diags := NewProductsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewProductsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ProductsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewProductsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewProductsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewProductsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewProductsValueMust(ProductsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ProductsType) ValueType(ctx context.Context) attr.Value {
	return ProductsValue{}
}

var _ basetypes.ObjectValuable = ProductsValue{}

type ProductsValue struct {
	Features basetypes.ListValue   `tfsdk:"features"`
	Product  basetypes.StringValue `tfsdk:"product"`
	state    attr.ValueState
}

func (v ProductsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["features"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["product"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Features.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["features"] = val

		val, err = v.Product.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["product"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ProductsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ProductsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ProductsValue) String() string {
	return "ProductsValue"
}

func (v ProductsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var featuresVal basetypes.ListValue
	switch {
	case v.Features.IsUnknown():
		featuresVal = types.ListUnknown(types.StringType)
	case v.Features.IsNull():
		featuresVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		featuresVal, d = types.ListValue(types.StringType, v.Features.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"features": basetypes.ListType{
				ElemType: types.StringType,
			},
			"product": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"features": basetypes.ListType{
			ElemType: types.StringType,
		},
		"product": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"features": featuresVal,
			"product":  v.Product,
		})

	return objVal, diags
}

func (v ProductsValue) Equal(o attr.Value) bool {
	other, ok := o.(ProductsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Features.Equal(other.Features) {
		return false
	}

	if !v.Product.Equal(other.Product) {
		return false
	}

	return true
}

func (v ProductsValue) Type(ctx context.Context) attr.Type {
	return ProductsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ProductsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"features": basetypes.ListType{
			ElemType: types.StringType,
		},
		"product": basetypes.StringType{},
	}
}
